
public class PacketStore {
	byte[] sensorTime(byte mode, byte hour, byte minute) {
		byte[] buffer = { 0x02, mode, (byte) 0xff, (byte) 'T', (byte) 0xff, (byte) 0x00, (byte) 0xff, hour, minute,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] LED_CONTROLL(byte cn, byte onoff) {
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, (byte) 'L', (byte) 0xff, cn, (byte) 0xff, onoff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] PWM_DUTY(byte cn, byte[] pwm, byte[] duty) {
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, (byte) 'P', (byte) 0xff, cn, (byte) 0xff, pwm[0], pwm[1], pwm[2],
				duty[0], duty[1], duty[2], (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] INTENSITY(byte cn, byte inten) {
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, 'I', (byte) 0xff, cn, (byte) 0xff, inten, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] ONOFF_TIME(byte cn, byte on_hour, byte on_minute, byte off_hour, byte off_minute) {// ONOFF설정
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, 'U', (byte) 0xff, cn, (byte) 0xff, on_hour, on_minute, off_hour,
				off_minute, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] CONDITION_1() {// 상태체크(시간 온도, 습도 등등)
		byte[] buffer = { 0x02, 0x02, (byte) 0xff, 'S', (byte) 0xff, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] ONOFF_TIME_CHECK() {// 메인보드 ON, OFF 시간 체크
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, 'R', (byte) 0xff, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] PWM_DUTY_CHECK() {// 메인보드 ON, OFF 시간 체크
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, 's', (byte) 0xff, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}

	byte[] LED_ONOFF_CHECK() {// 메인보드 ON, OFF 시간 체크
		byte[] buffer = { 0x02, 0x01, (byte) 0xff, 'S', (byte) 0xff, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
				(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x03 };
		return buffer;
	}
}
